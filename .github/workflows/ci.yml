name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: true

jobs:
  tests:
    name: Tests + Cobertura (umbral 90%)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Instalar .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restaurar herramientas dotnet
        run: dotnet tool restore

      - name: Ejecutar cobertura con umbral 90%
        shell: pwsh
        run: |
          ./scripts/test-coverage.ps1 -SolutionPath "FSH.sln" -Configuration "Release" -Threshold 90 -FailOnThreshold

      - name: Publicar reporte de cobertura
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage-report/**
            **/coverage.cobertura.xml

      - name: Publicar TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-trx
          path: |
            **/TestResults/TestResults.trx
            **/TestResults/*.trx

  docker-smoke:
    name: Docker Compose smoke tests (API/Blazor)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preparar .env para docker-compose (JWT aleatorio)
        run: |
          cp deploy/docker/.env.sample deploy/docker/.env
          jwt=$(openssl rand -base64 48 | tr -d '\n')
          sed -i "s|^JWT_KEY=.*|JWT_KEY=$jwt|" deploy/docker/.env

      - name: Levantar stack Docker Compose
        working-directory: deploy/docker
        run: docker compose up -d --build

      - name: Esperar API /health (timeout ~200s)
        run: |
          for i in {1..40}; do
            if curl -fsS "http://localhost:7000/health" > /dev/null; then echo "API /health OK"; exit 0; fi
            sleep 5
          done
          echo "Timeout esperando API /health" >&2
          docker compose -f deploy/docker/docker-compose.yml ps
          exit 1

      - name: Verificar API /alive
        run: curl -fsS "http://localhost:7000/alive"

      - name: Verificar Blazor (HTTP 200)
        run: curl -fsS "http://localhost:7100/"

      - name: Logs de contenedores (si falla)
        if: failure()
        run: |
          docker compose -f deploy/docker/docker-compose.yml ps
          docker compose -f deploy/docker/docker-compose.yml logs --no-color --tail=200

      - name: Derribar stack
        if: always()
        working-directory: deploy/docker
        run: docker compose down -v
