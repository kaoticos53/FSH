services:
  postgres:
    image: postgres:16-alpine
    container_name: fsh_postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_HOST_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  webapi:
    build:
      context: ../../src
      dockerfile: Dockerfile.Api
    container_name: fsh_webapi
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DatabaseOptions__Provider=postgresql
      - DatabaseOptions__ConnectionString=Server=postgres;Database=${POSTGRES_DB};Port=5432;User Id=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};
      - OriginOptions__OriginUrl=${API_BASE_URL}
      - CorsOptions__AllowedOrigins__0=${CORS_ALLOWED_ORIGIN_0}
      - JwtOptions__Key=${JWT_KEY}
    ports:
      - "${API_HOST_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  blazor:
    build:
      context: ../../src
      dockerfile: Dockerfile.Blazor
      args:
        - API_BASE_URL=${API_BASE_URL}
    container_name: fsh_blazor
    ports:
      - "${BLAZOR_HOST_PORT}:80"
    restart: unless-stopped

volumes:
  pgdata:
